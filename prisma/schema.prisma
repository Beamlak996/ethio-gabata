generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  password           String? 
  role               UserRole @default(USER)
  accounts           Account[]
  isTwoFactorEnabled Boolean @default(false)
  inviteCode         String? @unique
  referalId          String? @db.ObjectId
}

model Account {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

// model Referal {
//   id                String @id @default(auto()) @map("_id") @db.ObjectId
//   referredUserId    String @db.ObjectId
//   inviteCode        String

//   userId            String @db.ObjectId
//   user              User @relation(fields: [userId], references: [id])

//   createdAt         DateTime @default(now())
//   updatedAt         DateTime @updatedAt
// }